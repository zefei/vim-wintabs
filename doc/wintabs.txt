*wintabs.txt*                Per-window tabs for Vim

==============================================================================
CONTENTS                                                             *wintabs*

    1. Intro .......................................... |wintabs-intro|
    2. Usage .......................................... |wintabs-usage|
    3. Commands and mappings .......................... |wintabs-commands|
    4. Options ........................................ |wintabs-options|
    5. FAQ ............................................ |wintabs-faq|

==============================================================================
INTRO                                                          *wintabs-intro*

Wintabs is a per-window buffer manager for Vim. It creates "tabs" for each 
buffer opened in every Vim window, and displays these tabs either on |tabline| 
or |statusline|. It brings persistent contexts to Vim windows and tabs, making 
them more awesome.

==============================================================================
USAGE                                                          *wintabs-usage*

By default, wintabs maintains a list of tabs for each buffer opened in each 
window, and displays them on tabline. To navigate and manage these tabs, a few 
|wintabs-commands| and key mappings are provided, and they are very similar to 
what Vim buffers/tabs have.

To make full use of wintabs, it is recommended to have the following commands 
or keys mapped, these are the essential ones:

  |wintabs-commands|     mapping keys                   replacing Vim commands
  --------------------------------------------------------------------------
  |:WintabsNext|         |<Plug>(wintabs_next)|           |:bnext|!
  |:WintabsPrevious|     |<Plug>(wintabs_previous)|       |:bprevious|!
  |:WintabsClose|        |<Plug>(wintabs_close)|          |:bdelete|
  |:WintabsUndo|         |<Plug>(wintabs_undo)|
  |:WintabsOnly|         |<Plug>(wintabs_only)|
  |:WintabsCloseWindow|  |<Plug>(wintabs_close_window)|   |:close|, CTRL-W c
  |:WintabsOnlyWindow|   |<Plug>(wintabs_only_window)|    |:only|, CTRL-W o
  |:WintabsCloseVimtab|  |<Plug>(wintabs_close_vimtab)|   |:tabclose|
  |:WintabsOnlyVimtab|   |<Plug>(wintabs_only_vimtab)|    |:tabonly|

Below is an example of key mappings:>

    map <C-H> <Plug>(wintabs_previous)
    map <C-L> <Plug>(wintabs_next)
    map <C-T>c <Plug>(wintabs_close)
    map <C-T>u <Plug>(wintabs_undo)
    map <C-T>o <Plug>(wintabs_only)
    map <C-W>c <Plug>(wintabs_close_window)
    map <C-W>o <Plug>(wintabs_only_window)
    command! Tabc WintabsCloseVimtab
    command! Tabo WintabsOnlyVimtab
<

See wintabs-commands for all available commands and mappings.

Wintabs can display buffers on either tabline or statusline. It's recommended 
to use tabline if you typically work without using split windows; otherwise, 
statusline is recommended. If Wintabs is set to use statusline, it 
automatically moves your original statusline content to tabline.

==============================================================================
COMMANDS AND MAPPINGS                                       *wintabs-commands*

These are wintab commands and their normal mode key mappings.

*:WintabsNext*
*<Plug>(wintabs_next)*
                Switch to the next wintab.

*:WintabsPrevious*
*<Plug>(wintabs_previous)*
                Switch to the previous wintab.

*:WintabsClose*
*<Plug>(wintabs_close)*
                Close the current wintab. Depending on the value of 
                |g:wintabs_autoclose|, might also close the current window.

*:WintabsUndo*
*<Plug>(wintabs_undo)*
                Undo last closed wintab if its file exists.

*:WintabsOnly*
*<Plug>(wintabs_only)*
                Close all but the current wintab.

*:WintabsAll*
*<Plug>(wintabs_all)*
                Open all wintabs that belong to the current Vim tab in the 
                current window.

*:WintabsAllBuffers*
                Open all Vim buffers in the current window.

*:WintabsCloseWindow*
*<Plug>(wintabs_close_window)*
                Close the current window, very much like CTRL-W c. But it 
                fails if there are modified wintabs open. This is recommended 
                to be used to replace CTRL-W c.

*:WintabsOnlyWindow*
*<Plug>(wintabs_only_window)*
                Close all but the current window, very much like CTRL-W o. But 
                it fails if there are modified wintabs open. This is 
                recommended to be used to replace CTRL-W o.

*:WintabsCloseVimtab*
*<Plug>(wintabs_close_vimtab)*
                Close the current Vim tab, very much like |:tabclose|. But it 
                fails if there are modified wintabs open. This is recommended 
                to be used to replace |:tabclose|.

*:WintabsOnlyVimtab*
*<Plug>(wintabs_only_vimtab)*
                Close all but the current Vim tab, very much like |:tabonly|. 
                But it fails if there are modified wintabs open. This is 
                recommended to be used to replace |:tabonly|.

*:WintabsGo* N
*<Plug>(wintabs_tab1)* , *<Plug>(wintabs_tab2)* ,... *<Plug>(wintabs_tab9)*
                Switch to the Nth wintab.

*:WintabsFirst*
*<Plug>(wintabs_first)*
                Switch to the first wintab.

*:WintabsLast*
*<Plug>(wintabs_last)*
                Switch to the last wintab.

*:WintabsMove* N
*<Plug>(wintabs_move_left)* , *<Plug>(wintabs_move_right)*
                Move the current wintab to the right by N tabs, or to the left 
                if N < 0.

*:WintabsMoveToWindow* {arg}
*<Plug>(wintabs_move_to_window_left)*
*<Plug>(wintabs_move_to_window_right)*
*<Plug>(wintabs_move_to_window_above)*
*<Plug>(wintabs_move_to_window_below)*
*<Plug>(wintabs_move_to_window_next)*
                Move the current wintab to the window by using *wincmd* motion 
                {arg}.

*:WintabsMaximize*
*<Plug>(wintabs_maximize)*
                Move the current window to its own Vim tab, very much like 
                CTRL-W T. But it also brings all of its wintabs.

*:WintabsDo* {cmd}
                Execute {cmd} for each wintab in the current window, very much 
                like |:tabdo|.

*:WintabsRefresh*
*<Plug>(wintabs_refresh)*
                Refresh UI. This might be needed after configuration changes.

==============================================================================
OPTIONS                                                      *wintabs-options*

*g:wintabs_display*
values: 'tabline', 'statusline', or 'none'
default: 'tabline'
                This controls where wintabs are drawn.
                'tabline' is recommended if you typically work without using 
                split windows.
                Otherwise, 'statusline' is recommended.

*g:wintabs_autoclose*
values: 0, 1, or 2
default: 1
                This controls whether the window is auto closed, when the last 
                wintab is closed using |:WintabsClose|.
                0: never auto close.
                1: auto close only when there are no listed wintabs.
                2: always auto close.

*g:wintabs_autoclose_vim*
values: 0 or 1
default: 0
                This controls whether Vim is auto closed, when the last window
                in the only Vim tab is closed.
                0: never auto close.
                1: always auto close.

*g:wintabs_autoclose_vimtab*
values: 0 or 1
default: 0
                This controls whether the Vim tab is auto closed, when the 
                last window is closed.
                0: never auto close.
                1: always auto close.

*g:wintabs_switchbuf*
values: '', 'useopen', or 'usetab'
default: value of |switchbuf| option
                This controls the behavior when switching between buffers.
                'useopen': jump to the first window in current vim tab that 
                contains the specific buffer. Otherwise open it in current 
                window.
                'usetab': similar to 'useopen' but searches in all vim tabs.
                '': always open in current window.

*g:wintabs_statusline*
values: |statusline| string
default: value of |statusline| option
                When |g:wintabs_display| is set to 'statusline', wintabs 
                occupies current statusline and moves the original statusline 
                content to tabline.
                By default, this option is set to what 'original statusline' 
                is. If vim-airline is installed, airline#statusline() is used.
                Set this option to a custom function like "%!MyStatusline()" 
                if you want to show complex and customized status on tabline.
                Set this option to empty string to disable this behavior.

*g:wintabs_ignored_filetypes*
values: list of filetype strings
default: ['gitcommit', 'vundle', 'qf', 'vimfiler']
                This is a blacklist of filetypes, based on which buffers are 
                ignored by wintabs.
                Also, |unlisted-buffer|s are ignored.

*g:wintabs_reverse_order*
values: 0 or 1
default: 0
                This controls whether new buffers will be added to the
                beginning of the wintabs list rather than the end.

*g:wintabs_renderers*
values: dictionary of renderer functions
default: wintabs#renderers#defaults()
                This dictionary contains all wintabs renderer functions. These 
                functions can be overriden to customize all wintabs UI.
                To see how renderer function works, take a look at the default 
                buffer renderer implementation inside 
                `autoload/wintabs/renderers.vim`.

                vim-wintabs-powerline provides a set of renderers for using 
                Powerline fonts with wintabs.

*g:wintabs_ui_modified*
values: string
default: ' +'
                This sets the |'modified'| mark for modified buffers.

*g:wintabs_ui_readonly*
values: string
default: ' -'
                This sets the |'readonly'| mark for readonly buffers.

*g:wintabs_ui_sep_leftmost*
*g:wintabs_ui_sep_inbetween*
*g:wintabs_ui_sep_rightmost*
values: string
default: '', '|', '|'
                These characters are drawn before wintabs, between wintabs, 
                and after wintabs. It's recommended that they have the same 
                length, and are ascii characters.

*g:wintabs_ui_active_left*
*g:wintabs_ui_active_right*
values: string
default: ' '
                These characters are drawn around the active wintab. 
                '[]' and ')(' are some of the good ones. It's recommended that
                they have the same length as separators, and are ascii 
                characters.

*g:wintabs_ui_buffer_name_format*
values: string
default: ' %t '
                You can specify format of wintab representation.
                By default it is only name of buffer. But you can use the
                following arguments:
                '%t': name of buffer
                '%n': |bufnr()| of buffer
                '%o': ordinal number of buffer

*g:Wintabs_ui_bufname*
values: function
                Function that generates the file name to be used as '%t' for
                |g:wintabs_ui_vimtab_name_format|.
                By default this uses the file name without any directories
                ('%:t').
                You can use this, for example, to display 'my-button/i'
                instead of 'index.tsx' for the file 'src/my-button/index.tsx'
                for a more useful tabline in JavaScript/TypeScript codebases.

                    function! g:Wintabs_ui_bufname(bufnr)
                      let file = fnamemodify(bufname(a:bufnr), ':t')

                      if index(['index.tsx', 'index.ts', 'index.jsx', 'index.js'], file) != -1
                        let parent_dir = fnamemodify(bufname(a:bufnr), ':h:t')
                        return parent_dir . '/i'
                      endif

                      return file
                    endfunction

*g:wintabs_ui_vimtab_name_format*
values: string
default: ' %n '
                You can specify format of Vim tab representation.
                By default it is only number of Vim tab. But you can use the
                following arguments:
                '%t': name of buffer on this tab
                '%n': number of Vim tab

*g:wintabs_ui_active_vimtab_left*
*g:wintabs_ui_active_vimtab_right*
values: string
default: ' '
                These characters are drawn around the active Vim tab.
                '[]' and '<>' are some of the good ones. It's recommended that
                they have the same length as separators.

*g:wintabs_ui_active_higroup*
values: string of highlight group
default: 'TabLineSel' or 'Normal', depending on |g:wintabs_display|
                This sets the highlight group of the active wintab.

==============================================================================
FAQ                                                              *wintabs-faq*

Q: Does wintabs support Powerline fonts?

A: Yes. The vim-wintabs-powerline addon provides a set of renderers for using 
Powerline fonts with wintabs.

Q: Does wintabs support Vim sessions?

A: Yes, as long as your |'sessionoptions'| contains "globals". Wintabs also 
supports xolox/vim-session plugin out of the box.

Q: Does wintabs work with statusline/tabline plugins like airline?

A: Wintabs can work reasonably well with statusline/tabline plugins as long as 
you load wintabs after other plugins.

==============================================================================

_\__/_  \_(-_- \) ...tabs...                                 vim:tw=78:ft=help
